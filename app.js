const SETTINGS_KEY='rs_final_settings'; const KEYNAME='OPENROUTER_KEY_LOCAL'; const USERNAME_RE=/^[a-z0-9_.]{3,20}$/;
function q(s){return document.querySelector(s)}; function ce(t){return document.createElement(t)}; function toast(m){const t=q('#toast');t.textContent=m||'Done';t.classList.add('show');setTimeout(()=>t.classList.remove('show'),1200)}
function defaults(){ return { defaultModel:'openrouter/auto', autosave:true, theme:'gray', freeImg:true, stabilityEnabled:false, stabilityKey:'', firebaseConfig: window.__EMBEDDED_FIREBASE_CONFIG__||null, uid:null, profile:null };}
function loadSettings(){ try{return Object.assign(defaults(), JSON.parse(localStorage.getItem(SETTINGS_KEY)||'{}'))}catch{return defaults()} }
function saveSettings(s){ localStorage.setItem(SETTINGS_KEY, JSON.stringify(s)); }
let settings=loadSettings();
function keyForSessions(){ return 'rs_v1_sessions' + (settings.uid?('_'+settings.uid):''); }
function loadState(){ try{return JSON.parse(localStorage.getItem(keyForSessions()))||{sessions:[]}}catch{return{sessions:[]}} }
function saveState(state){ if(settings.autosave!==false) localStorage.setItem(keyForSessions(), JSON.stringify(state)); }
let state=loadState(); let current=ensureCurrent(); const elSessions=q('#sessions'), elMsgs=q('#msgs'), elForm=q('#composer'), elInput=q('#input'), elModel=q('#model');
function ensureCurrent(){ if(!state.sessions.length) return createSession('New chat'); return state.sessions[0]; }
function createSession(title){ const s={id:Date.now().toString(36), title, messages:[]}; state.sessions.unshift(s); saveState(state); return s; }
function addMessage(id, role, content){ const s=state.sessions.find(s=>s.id===id); s.messages.push({id:crypto.randomUUID(),role,content,ts:Date.now()}); saveState(state); }
function renderSessions(){ elSessions.innerHTML=''; state.sessions.forEach(s=>{ const li=ce('li'); li.textContent=s.title; if(s.id===current.id) li.className='active'; li.onclick=()=>openSession(s.id); elSessions.appendChild(li); }); }
function openSession(id){ current=state.sessions.find(s=>s.id===id); q('#title').textContent=current.title; renderSessions(); renderMessages(id); }
function renderMessages(id){ elMsgs.innerHTML=''; const s=state.sessions.find(s=>s.id===id); (s.messages||[]).forEach(m=>{ const div=ce('div'); div.className=`msg ${m.role}`; const role=ce('div'); role.className='role'; role.textContent=m.role; const body=ce('div'); body.className='body'; body.textContent=m.content||''; div.appendChild(role); div.appendChild(body); elMsgs.appendChild(div); }); elMsgs.scrollTop=elMsgs.scrollHeight; }
elForm.addEventListener('submit', async (e)=>{ e.preventDefault(); const text=(elInput.value||'').trim(); if(!text) return; elInput.value=''; addMessage(current.id,'user',text); renderMessages(current.id); try{ const apiKey=localStorage.getItem(KEYNAME)||''; if(!apiKey) throw new Error('API key required'); const res=await fetch('https://openrouter.ai/api/v1/chat/completions',{method:'POST',headers:{'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json','HTTP-Referer':location.origin,'X-Title':'Rsdpugeij Chatbot'},body:JSON.stringify({model:elModel.value||'openrouter/auto',messages:[{role:'system',content:'You are Rsdpugeij, a concise helpful assistant.'},{role:'user',content:text}]})}); if(!res.ok) throw new Error('HTTP '+res.status+' '+await res.text()); const data=await res.json(); const reply=(data.choices?.[0]?.message?.content)||'[No reply]'; addMessage(current.id,'assistant',reply); renderMessages(current.id);}catch(err){ addMessage(current.id,'assistant','[Error] '+(err.message||err)); renderMessages(current.id);} });
q('#newSession').onclick=()=>{ const s=createSession(prompt('Session title','New chat')||'New chat'); renderSessions(); openSession(s.id); };
q('#clearHistory').onclick=()=>{ if(!confirm('Clear ALL chat history for this session?'))return; current.messages=[]; saveState(state); renderMessages(current.id); };
q('#openSettings').onclick=()=>{ q('#firebaseConfig').value=JSON.stringify(settings.firebaseConfig||{},null,2); q('#settingsOverlay').classList.remove('hidden'); };
q('#closeSettings').onclick=()=> q('#settingsOverlay').classList.add('hidden');
q('#saveSettings').onclick=()=>{ settings.defaultModel=q('#defaultModel').value; settings.autosave=q('#autosaveToggle').checked; settings.theme=q('#themeSelect').value; settings.freeImg=q('#freeImgToggle').checked; settings.stabilityEnabled=q('#stabilityToggle').checked; settings.stabilityKey=(q('#stabilityKey').value||'').trim(); saveSettings(settings); q('#settingsOverlay').classList.add('hidden'); toast('Settings saved'); };
q('#changeKeyBtn').onclick=()=>{ q('#keyInput').value=localStorage.getItem(KEYNAME)||''; q('#keyOverlay').classList.remove('hidden'); };
q('#changeKeyInSettings').onclick=()=>{ q('#keyInput').value=localStorage.getItem(KEYNAME)||''; q('#keyOverlay').classList.remove('hidden'); };
q('#saveKey').onclick=()=>{ const k=(q('#keyInput').value||'').trim(); if(!k.startsWith('sk-or-')) return alert('Please paste a valid OpenRouter key (sk-or-...)'); localStorage.setItem(KEYNAME,k); q('#keyOverlay').classList.add('hidden'); alert('API key saved.'); };
/* Firebase Auth (Email + Google) */
let fb=null, auth=null, db=null;
function initFirebase(){ try{ if(!settings.firebaseConfig) return false; if(!fb){ fb=firebase.initializeApp(settings.firebaseConfig); } auth=firebase.auth(); db=firebase.firestore(); attachAuthObserver(); return true; }catch(e){ alert('Firebase init error: '+e.message); return false; } }
function attachAuthObserver(){ if(!auth) return; auth.onAuthStateChanged(async (user)=>{ if(user){ settings.uid=user.uid; settings.profile={name:user.displayName||user.email, email:user.email, photo:user.photoURL||''}; saveSettings(settings); const anon=localStorage.getItem('rs_v1_sessions'); if(anon && !localStorage.getItem('rs_v1_sessions_'+user.uid)){ localStorage.setItem('rs_v1_sessions_'+user.uid, anon); } state=loadState(); current=ensureCurrent(); renderSessions(); renderMessages(current.id); q('#userBadge').classList.remove('hidden'); q('#logoutBtn').classList.remove('hidden'); q('#userPhoto').src=user.photoURL||''; q('#userName').textContent=settings.profile.name||settings.profile.email||'Signed in'; q('#authOverlay').classList.add('hidden'); }else{ settings.uid=null; settings.profile=null; saveSettings(settings); state=loadState(); current=ensureCurrent(); renderSessions(); renderMessages(current.id); q('#userBadge').classList.add('hidden'); q('#logoutBtn').classList.add('hidden'); q('#authOverlay').classList.remove('hidden'); showPane('login'); } }); }
q('#logoutBtn').onclick=async()=>{ if(!auth){ q('#authOverlay').classList.remove('hidden'); return; } try{ await auth.signOut(); }catch(e){ alert('Logout error: '+e.message); } };
/* Auth UI */
const loginPane=q('#loginPane'), signupPane=q('#signupPane'), forgotPane=q('#forgotPane');
q('#tabLogin').onclick=()=>showPane('login'); q('#tabSignup').onclick=()=>showPane('signup'); q('#tabForgot').onclick=()=>showPane('forgot'); q('#toSignup').onclick=()=>showPane('signup'); q('#toLogin').onclick=()=>showPane('login'); q('#toForgot').onclick=()=>showPane('forgot'); q('#backToLogin').onclick=()=>showPane('login');
function showPane(which){ q('#tabLogin').classList.toggle('active',which==='login'); q('#tabSignup').classList.toggle('active',which==='signup'); q('#tabForgot').classList.toggle('active',which==='forgot'); loginPane.classList.toggle('hidden',which!=='login'); signupPane.classList.toggle('hidden',which!=='signup'); forgotPane.classList.toggle('hidden',which!=='forgot'); clearErrors(); }
function clearErrors(){ q('#loginErr').textContent=''; q('#signupErr').textContent=''; q('#forgotErr').textContent=''; q('#forgotInfo').textContent='Weâ€™ll email a reset link. Open it to set a new password.'; }
q('#loginBtn').onclick = async ()=>{ clearErrors(); const id=(q('#loginId').value||'').trim(); const pass=(q('#loginPass').value||'').trim(); if(!id) return q('#loginErr').textContent='Please type your email address valid'; if(!pass) return q('#loginErr').textContent='Password invalid'; try{ let email=id; if(!id.includes('@')){ const doc=await db.collection('usernames').doc(id.toLowerCase()).get(); if(!doc.exists) return q('#loginErr').textContent='Username invalid'; email=doc.data().email; } await auth.signInWithEmailAndPassword(email, pass); }catch(e){ const c=e.code||''; if(c==='auth/invalid-email') q('#loginErr').textContent='Please type your email address valid'; else if(c==='auth/user-not-found') q('#loginErr').textContent='Username invalid'; else if(c==='auth/wrong-password') q('#loginErr').textContent='Password invalid'; else q('#loginErr').textContent='Login error'; } };
q('#signupBtn').onclick = async ()=>{ clearErrors(); const username=(q('#suUser').value||'').trim().toLowerCase(); const email=(q('#suEmail').value||'').trim(); const pass=(q('#suPass').value||'').trim(); if(!/^[a-z0-9_.]{3,20}$/.test(username)) return q('#signupErr').textContent='Username invalid'; if(!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email)) return q('#signupErr').textContent='Please type your email address valid'; if(!(pass && pass.length>=8)) return q('#signupErr').textContent='Password invalid'; try{ const ref=db.collection('usernames').doc(username); const snap=await ref.get(); if(snap.exists) return q('#signupErr').textContent='Username already exists'; const cred=await auth.createUserWithEmailAndPassword(email, pass); const uid=cred.user.uid; await cred.user.updateProfile({displayName: username}); await ref.set({uid, username, email, createdAt: firebase.firestore.FieldValue.serverTimestamp()}); await db.collection('users').doc(uid).set({username, email, createdAt: firebase.firestore.FieldValue.serverTimestamp()}); toast('Account created'); }catch(e){ if((e.code||'')==='auth/email-already-in-use') return q('#signupErr').textContent='Email address already exists'; q('#signupErr').textContent='Signup error: '+(e.message||e); } };
q('#forgotBtn').onclick = async ()=>{ clearErrors(); const email=(q('#fpEmail').value||'').trim(); if(!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email)) return q('#forgotErr').textContent='Please type your email address valid'; try{ await auth.sendPasswordResetEmail(email); q('#forgotInfo').textContent='Verification link sent to your email address.'; toast('Reset email sent'); }catch(e){ q('#forgotErr').textContent='Could not send reset email'; } };
q('#googleBtn').onclick = async ()=>{ const provider = new firebase.auth.GoogleAuthProvider(); try{ await auth.signInWithPopup(provider); }catch(e){ try{ await auth.signInWithRedirect(provider); }catch(err){ alert('Google sign-in failed: '+err.message); } } };
renderSessions(); openSession(current.id); (function boot(){ if(settings.firebaseConfig){ try{ firebase.initializeApp(settings.firebaseConfig); }catch(e){}; initFirebase(); } else { q('#authOverlay').classList.remove('hidden'); } })();
